buildscript {
    repositories {
        def proguard_home = System.getenv("PROGUARD_HOME")
        if (proguard_home == null) {
            flatDir dirs: rootProject.file("./proguard/lib")
        } else {
            flatDir dirs: "${System.getenv("PROGUARD_HOME")}/lib"
        }
    }
    dependencies {
        classpath ":proguard:"
    }
}

apply plugin: "edu.sc.seis.launch4j"

configurations {
    compile {
        canBeConsumed = true
        canBeResolved = true
    }
}

jar {
    exclude "META-INF/**/**"
    exclude "META-INF/**"
    exclude "OSGI-OPT/"
    exclude "LICENSE"
    exclude "kotlin/*.kotlin_module"
    exclude "kotlin/*.kotlin_metadata"
    exclude "kotlin/*.kotlin_builtins"
    exclude "kotlin/**/*.kotlin_module"
    exclude "kotlin/**/*.kotlin_metadata"
    exclude "kotlin/**/*.kotlin_builtins"
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest {
        attributes "Main-Class": project.MainClass
        attributes "LightTunnel-VersionCode": String.valueOf(GitVc.VERSION_CODE)
        attributes "LightTunnel-VersionName": String.valueOf(GitVc.VERSION_NAME)
        attributes "LightTunnel-LastCommitSHA": String.valueOf(GitVc.LAST_COMMIT_SHA)
        attributes "LightTunnel-LastCommitDate": String.valueOf(GitVc.LAST_COMMIT_DATE)
        attributes "LightTunnel-BuildDate": String.valueOf(GitVc.BUILD_DATE)
    }
}

launch4j {
    headerType = "console"
    mainClassName = project.MainClass
    jar = rootProject.file("dists/${project.version}/${project.AppName ?: project.name}.jar")
    productName = "${project.AppName ?: project.name}.exe"
    internalName = "${project.AppName ?: project.name}"
    fileDescription = "${project.AppName ?: project.name}"
    outfile = "${project.AppName ?: project.name}.exe"
}

task _mixinProguardJar(
    group: "package",
    type: proguard.gradle.ProGuardTask,
    dependsOn: jar
) {
    List<File> proguardRules = new ArrayList<>()
    proguardRules.add(rootProject.file("./gradle/proguardrules/basic.txt"))
    proguardRules.add(rootProject.file("./gradle/proguardrules/third-party.txt"))
    proguardRules.add(project.file("proguard-rules.txt"))
    configuration proguardRules
    injars "${project.buildDir}/libs/${project.name}-${project.version}.jar"
    outjars rootProject.file("dists/${project.version}/${project.AppName ?: project.name}.jar")
}

task packageClean(
    group: "package",
    type: Delete,
    dependsOn: clean
) {
    delete rootProject.file("dists/${project.version}")
}

task packageJar(
    group: "package",
    dependsOn: _mixinProguardJar
)

task dists(
    group: "package",
    type: Copy,
    dependsOn: [_mixinProguardJar, createExe]
) {
    from new File(project.buildDir, "launch4j/${project.AppName ?: project.name}.exe")
    from(rootProject.file("resources")) {
        include "*.ini"
        include "*.jks"
    }
    into rootProject.file("dists/${project.version}")
    doLast {
        def jarFile = rootProject.file("dists/${project.version}/${project.AppName ?: project.name}.jar")
        def stubFile = rootProject.file("gradle/stub.sh")
        def shFile = rootProject.file("dists/${project.version}/${project.AppName ?: project.name}.sh")
        if (!jarFile.exists()) {
            return
        }

        def srcJar = new FileInputStream(jarFile)
        def srcStub = new FileInputStream(stubFile)
        def dst = new FileOutputStream(shFile)

        copyOf(srcStub, dst)
        copyOf(srcJar, dst)
        dst.flush()

        srcJar.close()
        srcStub.close()
        dst.close()
        shFile.setExecutable(true, false)
    }
}

static def copyOf(InputStream src, OutputStream dst) {
    byte[] buf = new byte[1024]
    int len
    while ((len = src.read(buf)) != -1) {
        dst.write(buf, 0, len)
    }
}
